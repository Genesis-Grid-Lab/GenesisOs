#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <cstring>
#include <errno.h>

#include <xf86drm.h>
#include <xf86drmMode.h>
#include <gbm.h>
#include <EGL/egl.h>
#include <EGL/eglext.h>
#include <GLES2/gl2.h>

#define CHECK(x, msg) if (!(x)) { std::cerr << msg << std::endl; cleanup(); return -1; }

// Global for cleanup
int drm_fd = -1;
drmModeModeInfo mode;
uint32_t crtc_id;
drmModeCrtc *saved_crtc = nullptr;
gbm_device *gbm = nullptr;
gbm_surface *gbm_surf = nullptr;
EGLDisplay egl_display = EGL_NO_DISPLAY;
EGLSurface egl_surf = EGL_NO_SURFACE;
EGLContext egl_ctx = EGL_NO_CONTEXT;
uint32_t conn_id;

void cleanup() {
    if (egl_display != EGL_NO_DISPLAY) {
        eglMakeCurrent(egl_display, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
        if (egl_ctx != EGL_NO_CONTEXT) eglDestroyContext(egl_display, egl_ctx);
        if (egl_surf != EGL_NO_SURFACE) eglDestroySurface(egl_display, egl_surf);
        eglTerminate(egl_display);
    }
    if (gbm_surf) gbm_surface_destroy(gbm_surf);
    if (gbm) gbm_device_destroy(gbm);
    if (saved_crtc) {
        drmModeSetCrtc(drm_fd, saved_crtc->crtc_id, saved_crtc->buffer_id,
                       saved_crtc->x, saved_crtc->y, &conn_id, 1, &saved_crtc->mode);
        drmModeFreeCrtc(saved_crtc);
    }
    if (drm_fd >= 0) close(drm_fd);
}

int main() {
    drm_fd = open("/dev/dri/card1", O_RDWR | O_CLOEXEC);
    CHECK(drm_fd >= 0, "Unable to open DRM device");

    drmModeRes *resources = drmModeGetResources(drm_fd);
    CHECK(resources, "drmModeGetResources failed");

    drmModeConnector *conn = nullptr;
    for (int i = 0; i < resources->count_connectors; ++i) {
        conn = drmModeGetConnector(drm_fd, resources->connectors[i]);
        if (conn->connection == DRM_MODE_CONNECTED) {
            conn_id = conn->connector_id;
            break;
        }
        drmModeFreeConnector(conn);
        conn = nullptr;
    }
    CHECK(conn, "No connected connector found");

    CHECK(conn->count_modes > 0, "No valid modes");
    mode = conn->modes[0];

    drmModeEncoder *enc = drmModeGetEncoder(drm_fd, conn->encoder_id);
    CHECK(enc, "No encoder");
    crtc_id = enc->crtc_id;

    saved_crtc = drmModeGetCrtc(drm_fd, crtc_id);

    gbm = gbm_create_device(drm_fd);
    CHECK(gbm, "Failed to create GBM device");

    gbm_surf = gbm_surface_create(gbm, mode.hdisplay, mode.vdisplay,
                                  GBM_FORMAT_XRGB8888,
                                  GBM_BO_USE_SCANOUT | GBM_BO_USE_RENDERING);
    CHECK(gbm_surf, "Failed to create GBM surface");

    egl_display = eglGetPlatformDisplay(EGL_PLATFORM_GBM_KHR, gbm, nullptr);
    CHECK(egl_display != EGL_NO_DISPLAY, "Failed to get EGL display");

    CHECK(eglInitialize(egl_display, nullptr, nullptr), "EGL init failed");

    std::cout << "EGL Version = " << eglQueryString(egl_display, EGL_VERSION) << "\n";
    std::cout << "EGL Vendor = " << eglQueryString(egl_display, EGL_VENDOR) << "\n";
    
    eglBindAPI(EGL_OPENGL_ES_API);

    EGLint cfg_attr[] = {
        EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
        EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
        EGL_RED_SIZE, 8, EGL_GREEN_SIZE, 8, EGL_BLUE_SIZE, 8,
	EGL_ALPHA_SIZE, 8,
	EGL_DEPTH_SIZE, 16,
        EGL_NONE
    };
    EGLConfig cfg = NULL;
    EGLint num = 0;
    CHECK(eglChooseConfig(egl_display, cfg_attr, &cfg, 1, &num) && num == 1, "No EGL config");

    EGLint ctx_attr[] = { EGL_CONTEXT_CLIENT_VERSION, 2, EGL_NONE };
    egl_ctx = eglCreateContext(egl_display, cfg, EGL_NO_CONTEXT, ctx_attr);
    CHECK(egl_ctx != EGL_NO_CONTEXT, "Failed to create EGL context");

    egl_surf = eglCreateWindowSurface(egl_display, cfg, gbm_surf, nullptr);
    if(egl_surf == EGL_NO_SURFACE){
      std::cout << eglGetError() << "\n";
    }
    CHECK(egl_surf != EGL_NO_SURFACE, "Failed to create EGL surface");

    CHECK(eglMakeCurrent(egl_display, egl_surf, egl_surf, egl_ctx), "eglMakeCurrent failed");

    // Render loop
    for (int i = 0; i < 300; ++i) {
        float r = (float)i / 300.0f;
        glClearColor(r, 0.0f, 1.0f - r, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);
        eglSwapBuffers(egl_display, egl_surf);

        gbm_bo *bo = gbm_surface_lock_front_buffer(gbm_surf);
        uint32_t handle = gbm_bo_get_handle(bo).u32;
        uint32_t pitch = gbm_bo_get_stride(bo);
        uint32_t fb;
        drmModeAddFB(drm_fd, mode.hdisplay, mode.vdisplay, 24, 32, pitch, handle, &fb);
        drmModeSetCrtc(drm_fd, crtc_id, fb, 0, 0, &conn_id, 1, &mode);
        usleep(16000);  // ~60fps
        drmModeRmFB(drm_fd, fb);
        gbm_surface_release_buffer(gbm_surf, bo);
    }

    cleanup();
    return 0;
}
